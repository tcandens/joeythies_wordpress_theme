//
// MIXINS
// ------

// Stripe background patterns
// Returns the complimentary angle
complimentary-angle(A)
  B = 90 - A
  return B

_rads(degrees)
  return ( degrees * PI ) / 180

// Returns the the length of unknown side with
// one known length and two known angles
// A: opposite angle of wanted side;
// b: known side length; B: opposite angle of b;
sine-law(A, b, B)
  a = (b / sin(_rads(B)) * sin(_rads(A)))
  return abs(round(a))

lines(color, line-width, gradient-width, angle = 30)
  comp-angle = complimentary-angle(angle)
  background-image: repeating-linear-gradient(unit(angle, 'deg'),
    color,
    color unit(line-width, 'px'),
    transparent unit(line-width + 1, 'px'),
    transparent unit(gradient-width, 'px') )
  box-width = sine-law(90, gradient-width, angle)
  box-height = sine-law(angle, box-width, comp-angle)
  -webkit-background-size: unit(box-width, 'px') unit(box-height, 'px')

// Define the cache and the aliases
$media_cache = {}
$media_aliases = {
  med:  '(min-width: 720px)'
}

// Mixin for caching the blocks with the given conditions
media($condition)
  helper($condition)
    unless $media_cache[$condition]
      $media_cache[$condition] = ()
    push($media_cache[$condition], block)

  +helper($condition)
    {selector() + ''}
      {block}

// Function we would use to call all the cached styles
apply_media_cache()
  for $media, $blocks in $media_cache
    $media = unquote($media_aliases[$media] || $media)
    $media = '(%s)' % $media unless match('\(', $media)
    $media = 'only screen and %s' % $media
    @media $media
      for $block in $blocks
        {$block}

// Here would be our main styles, using the `media` mixin
// â€¦

// Here we call all the cached styles
apply_media_cache()
